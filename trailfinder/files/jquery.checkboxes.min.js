(function (a, b, c) {
    var d = {
        prefix: "j",
        onInit: null,
        onChange: null,
        onDestroy: null
    };
    var e = {
        init: function (b) {
            var c = {};
            c.settings = a.extend({}, d, b);
            c.$el = a(this), c.$label = a('label[for="' + c.$el.attr("id") + '"]'), c.inputType = c.$el.attr("type"), c.className = c.settings.prefix + c.inputType;
            c.$el.addClass(c.settings.prefix + "hidden");
            c.$label.addClass(c.className);
            c.$label.wrapInner('<span class="label-text" />');
            c.$label.prepend('<span class="input-icon" />');
            if (c.$el.is(":checked")) {
                c.$label.addClass(c.settings.prefix + "checked")
            }
            if (a.isFunction(c.settings.onInit)) {
                c.settings.onInit.apply(this, [c.$el])
            }
            c.$el.data("jCheckboxes", c);
            c.$label.on("click", function () {
                switch (c.inputType) {
                case "checkbox":
                    c.$label.toggleClass(c.settings.prefix + "checked");
                    var b = c.$label.hasClass(c.settings.prefix + "checked") ? true : false;
                    c.$el.attr("checked", b);
                    c.$el.trigger("change");
                    break;
                case "radio":
                    var d = c.$el.attr("name");
                    a('input[name="' + d + '"]').each(function () {
                        var b = a(this).attr("id");
                        a(this).attr("checked", false);
                        a(this).trigger("change");
                        a('label[for="' + b + '"]').removeClass(c.settings.prefix + "checked")
                    });
                    c.$el.attr("checked", true);
                    $el.trigger("change");
                    c.$label.addClass(c.settings.prefix + "checked");
                    break
                }
                if (a.isFunction(c.settings.onChange)) {
                    var b = c.$el.is(":checked") ? true : false;
                    c.settings.onChange.apply(this, [c.$el, b])
                }
                return false
            })
        },
        destroy: function () {
            var b = a(this).data("jCheckboxes"),
                c = new RegExp(b.settings.prefix + "\\w+"),
                d = b.$label.attr("class").match(c);
            b.$label.children(".input-icon").remove();
            b.$label.children(".label-text").contents().unwrap();
            b.$label.off("click");
            for (var e in d) {
                b.$label.removeClass(d[e])
            }
            b.$el.removeClass(b.settings.prefix + "hidden");
            if (a.isFunction(b.settings.onDestroy)) {
                b.settings.onDestroy.apply(this, [b.$el])
            }
            b.$el.removeData("jCheckboxes")
        }
    };
    a.fn.jCheckboxes = function (b) {
        var b = b;
        return this.each(function () {
            if (e[b]) {
                return e[b].apply(this, Array.prototype.slice.call(b, 1))
            } else if (typeof b == "object" || !b) {
                return e["init"].apply(this, [b])
            } else {
                a.error("The method " + b + " is not available for jCheckboxes!")
            }
        })
    }
})(jQuery, window)
